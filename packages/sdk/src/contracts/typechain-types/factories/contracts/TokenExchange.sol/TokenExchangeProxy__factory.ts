/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenExchangeProxy,
  TokenExchangeProxyInterface,
} from "../../../contracts/TokenExchange.sol/TokenExchangeProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "logic",
        type: "address",
      },
      {
        internalType: "address",
        name: "admin_",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x604060808152346200030c5762000dd4803803806200001e8162000311565b9283398101906060818303126200030c576200003a816200034d565b916020926200004b8484016200034d565b8584015190936001600160401b0391908282116200030c57019280601f850112156200030c5783519362000089620000838662000362565b62000311565b94808652878601928882840101116200030c578288620000aa93016200037e565b823b15620002b2577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b03199081166001600160a01b0386811691821790935590959194600093909290917fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b8580a2805115801590620002aa575b620001fb575b50505050507fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103937f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f86865493815196818616885216958684820152a18315620001a95750161790555161097790816200045d8239f35b60849086519062461bcd60e51b82526004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b895194606086019081118682101762000296578a52602785527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c89860152660819985a5b195960ca1b8a86015251620002809493929183918291845af4903d156200028c573d62000270620000838262000362565b90815280938a3d92013e620003a3565b50388080808062000133565b60609250620003a3565b634e487b7160e01b85526041600452602485fd5b50836200012d565b865162461bcd60e51b815260048101879052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200033757604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200030c57565b6001600160401b0381116200033757601f01601f191660200190565b60005b838110620003925750506000910152565b818101518382015260200162000381565b91929015620004085750815115620003b9575090565b3b15620003c35790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156200041c5750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526200044e81518092816024860152602086860191016200037e565b601f01601f19168101030190fdfe6080604052366101d7577fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b031633036101d2576000357fffffffff0000000000000000000000000000000000000000000000000000000016631b2ce7f360e11b810361007e5750610076610528565b602081519101f35b7f4f1ef2860000000000000000000000000000000000000000000000000000000081036100b357506100ae610715565b610076565b7f8f2839700000000000000000000000000000000000000000000000000000000081036100e357506100ae61041d565b7ff851a44000000000000000000000000000000000000000000000000000000000810361011357506100ae61031c565b7f5c60da1b0000000000000000000000000000000000000000000000000000000003610141576100ae610368565b60405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a490fd5b610244565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103546001600160a01b03163303610244576000357fffffffff0000000000000000000000000000000000000000000000000000000016631b2ce7f360e11b810361007e5750610076610528565b6001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54166000808092368280378136915af43d82803e1561028a573d90f35b3d90fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176102d957604052565b61028e565b6020810190811067ffffffffffffffff8211176102d957604052565b90601f8019910116810190811067ffffffffffffffff8211176102d957604052565b6103246107a6565b6001600160a01b037fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103541660405190602082015260208152610365816102bd565b90565b6103706107a6565b6001600160a01b037f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541660405190602082015260208152610365816102bd565b600435906001600160a01b03821682036103c757565b600080fd5b60209060031901126103c7576004356001600160a01b03811681036103c75790565b67ffffffffffffffff81116102d957601f01601f191660200190565b60405190610417826102de565b60008252565b6104256107a6565b366004116103c7576001600160a01b038061043f366103cc565b167fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103917f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f604084549281519084168152846020820152a181156104be5773ffffffffffffffffffffffffffffffffffffffff191617905561036561040a565b608460405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b6105306107a6565b366004116103c7576001600160a01b03610549366103cc565b1660405190610557826102de565b60008252803b1561060d577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8173ffffffffffffffffffffffffffffffffffffffff19825416179055807fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a2815115801590610605575b6105eb575b50506040516105e4816102de565b6000815290565b6105fd916105f76107ad565b9161081d565b5038806105d6565b5060006105d1565b608460405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152fd5b803b1561060d576001600160a01b0381167f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8173ffffffffffffffffffffffffffffffffffffffff198254161790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a281511580159061070d575b6106fe575050565b61070a916105f76107ad565b50565b5060016106f6565b366004116103c75760403660031901126103c7576107316103b1565b6024359067ffffffffffffffff82116103c757366023830112156103c75781600401359161075e836103ee565b9161076c60405193846102fa565b83835236602485840101116103c757600060208561079e9660246001600160a01b039601838801378501015216610677565b61036561040a565b346103c757565b604051906060820182811067ffffffffffffffff8211176102d957604052602782527f206661696c6564000000000000000000000000000000000000000000000000006040837f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c60208201520152565b6000806103659493602081519101845af43d1561085c573d9161083f836103ee565b9261084d60405194856102fa565b83523d6000602085013e6108af565b6060916108af565b1561086b57565b606460405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b919290156108cf57508151156108c3575090565b610365903b1515610864565b8251909150156108e25750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b828510610928575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935061090556fea2646970667358221220ece4fc18bebb943606c10b5178d90b33070aeb9573909a23e2b2e96aed36e3ff64736f6c63430008140033";

type TokenExchangeProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenExchangeProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenExchangeProxy__factory extends ContractFactory {
  constructor(...args: TokenExchangeProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    logic: PromiseOrValue<string>,
    admin_: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenExchangeProxy> {
    return super.deploy(
      logic,
      admin_,
      data,
      overrides || {}
    ) as Promise<TokenExchangeProxy>;
  }
  override getDeployTransaction(
    logic: PromiseOrValue<string>,
    admin_: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(logic, admin_, data, overrides || {});
  }
  override attach(address: string): TokenExchangeProxy {
    return super.attach(address) as TokenExchangeProxy;
  }
  override connect(signer: Signer): TokenExchangeProxy__factory {
    return super.connect(signer) as TokenExchangeProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenExchangeProxyInterface {
    return new utils.Interface(_abi) as TokenExchangeProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenExchangeProxy {
    return new Contract(address, _abi, signerOrProvider) as TokenExchangeProxy;
  }
}
