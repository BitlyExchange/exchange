/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace TokenExchange {
  export type LimitOrderViewStruct = {
    originToken: PromiseOrValue<string>;
    targetToken: PromiseOrValue<string>;
    point: PromiseOrValue<BigNumberish>;
  };

  export type LimitOrderViewStructOutput = [string, string, number] & {
    originToken: string;
    targetToken: string;
    point: number;
  };

  export type OrderStruct = {
    selling: PromiseOrValue<BigNumberish>;
    unlegacyEarn: PromiseOrValue<BigNumberish>;
    legacyEarn: PromiseOrValue<BigNumberish>;
    accLegacyEarn: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    selling: BigNumber;
    unlegacyEarn: BigNumber;
    legacyEarn: BigNumber;
    accLegacyEarn: BigNumber;
  };
}

export interface TokenExchangeInterface extends utils.Interface {
  functions: {
    "_claimEarningInternal(address,int24)": FunctionFragment;
    "blockDeployed()": FunctionFragment;
    "cancelAllLimitOrders()": FunctionFragment;
    "cancelLimitOrder(address,int24)": FunctionFragment;
    "claimAllEarnings()": FunctionFragment;
    "claimEarning(address,int24)": FunctionFragment;
    "clearZeroLimOrders(address,uint256)": FunctionFragment;
    "curPoint()": FunctionFragment;
    "limitOrder(address,int24,uint128,address,address)": FunctionFragment;
    "limitOrders(address)": FunctionFragment;
    "marketOrder(address,uint128,int24,uint16,address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairInfo()": FunctionFragment;
    "pointMargin()": FunctionFragment;
    "pointOrder(int24)": FunctionFragment;
    "queryEarning(address,int24,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "startOff()": FunctionFragment;
    "totalVolume()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_claimEarningInternal"
      | "blockDeployed"
      | "cancelAllLimitOrders"
      | "cancelLimitOrder"
      | "claimAllEarnings"
      | "claimEarning"
      | "clearZeroLimOrders"
      | "curPoint"
      | "limitOrder"
      | "limitOrders"
      | "marketOrder"
      | "owner"
      | "pairInfo"
      | "pointMargin"
      | "pointOrder"
      | "queryEarning"
      | "renounceOwnership"
      | "startOff"
      | "totalVolume"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_claimEarningInternal",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "blockDeployed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAllLimitOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelLimitOrder",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimEarning",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearZeroLimOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "curPoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "limitOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "limitOrders",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pairInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pointMargin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pointOrder",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "queryEarning",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startOff", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalVolume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_claimEarningInternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelAllLimitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelLimitOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimAllEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimEarning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearZeroLimOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "limitOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pairInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pointMargin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pointOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queryEarning",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startOff", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalVolume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CacheCleared(address)": EventFragment;
    "EarningClaimed(address,int24,uint128,address,uint256)": EventFragment;
    "LimitOrderCanceled(address,int24,uint128,address)": EventFragment;
    "LimitOrderPlaced(address,int24,uint128,uint128,address)": EventFragment;
    "MarketOrderCompleted(address,uint128,uint128)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Swapped(address,int24,uint128,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CacheCleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EarningClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitOrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitOrderPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketOrderCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swapped"): EventFragment;
}

export interface CacheClearedEventObject {
  user: string;
}
export type CacheClearedEvent = TypedEvent<[string], CacheClearedEventObject>;

export type CacheClearedEventFilter = TypedEventFilter<CacheClearedEvent>;

export interface EarningClaimedEventObject {
  targetToken: string;
  point: number;
  earning: BigNumber;
  wallet: string;
  timestamp: BigNumber;
}
export type EarningClaimedEvent = TypedEvent<
  [string, number, BigNumber, string, BigNumber],
  EarningClaimedEventObject
>;

export type EarningClaimedEventFilter = TypedEventFilter<EarningClaimedEvent>;

export interface LimitOrderCanceledEventObject {
  originToken: string;
  point: number;
  refund: BigNumber;
  wallet: string;
}
export type LimitOrderCanceledEvent = TypedEvent<
  [string, number, BigNumber, string],
  LimitOrderCanceledEventObject
>;

export type LimitOrderCanceledEventFilter =
  TypedEventFilter<LimitOrderCanceledEvent>;

export interface LimitOrderPlacedEventObject {
  token: string;
  point: number;
  amount: BigNumber;
  earning: BigNumber;
  wallet: string;
}
export type LimitOrderPlacedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber, string],
  LimitOrderPlacedEventObject
>;

export type LimitOrderPlacedEventFilter =
  TypedEventFilter<LimitOrderPlacedEvent>;

export interface MarketOrderCompletedEventObject {
  originToken: string;
  amount: BigNumber;
  earning: BigNumber;
}
export type MarketOrderCompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  MarketOrderCompletedEventObject
>;

export type MarketOrderCompletedEventFilter =
  TypedEventFilter<MarketOrderCompletedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SwappedEventObject {
  originToken: string;
  point: number;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type SwappedEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  SwappedEventObject
>;

export type SwappedEventFilter = TypedEventFilter<SwappedEvent>;

export interface TokenExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TokenExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _claimEarningInternal(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    blockDeployed(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelAllLimitOrders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelLimitOrder(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimAllEarnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimEarning(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    clearZeroLimOrders(
      user: PromiseOrValue<string>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    curPoint(overrides?: CallOverrides): Promise<[number]>;

    limitOrder(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    limitOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [TokenExchange.LimitOrderViewStructOutput[]] & {
        orders: TokenExchange.LimitOrderViewStructOutput[];
      }
    >;

    marketOrder(
      originToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      startPoint: PromiseOrValue<BigNumberish>,
      slipLimit: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairInfo(
      overrides?: CallOverrides
    ): Promise<[string, string] & { tokenX: string; tokenY: string }>;

    pointMargin(overrides?: CallOverrides): Promise<[number]>;

    pointOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [TokenExchange.OrderStructOutput, TokenExchange.OrderStructOutput] & {
        X: TokenExchange.OrderStructOutput;
        Y: TokenExchange.OrderStructOutput;
      }
    >;

    queryEarning(
      targetToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sold: BigNumber;
        earned: BigNumber;
        selling: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startOff(overrides?: CallOverrides): Promise<[boolean]>;

    totalVolume(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _claimEarningInternal(
    originToken: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  blockDeployed(overrides?: CallOverrides): Promise<BigNumber>;

  cancelAllLimitOrders(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelLimitOrder(
    originToken: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimAllEarnings(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimEarning(
    originToken: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  clearZeroLimOrders(
    user: PromiseOrValue<string>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  curPoint(overrides?: CallOverrides): Promise<number>;

  limitOrder(
    originToken: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    holder: PromiseOrValue<string>,
    referral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  limitOrders(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TokenExchange.LimitOrderViewStructOutput[]>;

  marketOrder(
    originToken: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    startPoint: PromiseOrValue<BigNumberish>,
    slipLimit: PromiseOrValue<BigNumberish>,
    holder: PromiseOrValue<string>,
    referral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairInfo(
    overrides?: CallOverrides
  ): Promise<[string, string] & { tokenX: string; tokenY: string }>;

  pointMargin(overrides?: CallOverrides): Promise<number>;

  pointOrder(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [TokenExchange.OrderStructOutput, TokenExchange.OrderStructOutput] & {
      X: TokenExchange.OrderStructOutput;
      Y: TokenExchange.OrderStructOutput;
    }
  >;

  queryEarning(
    targetToken: PromiseOrValue<string>,
    point: PromiseOrValue<BigNumberish>,
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      sold: BigNumber;
      earned: BigNumber;
      selling: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startOff(overrides?: CallOverrides): Promise<boolean>;

  totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _claimEarningInternal(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    blockDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAllLimitOrders(overrides?: CallOverrides): Promise<void>;

    cancelLimitOrder(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimAllEarnings(overrides?: CallOverrides): Promise<void>;

    claimEarning(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    clearZeroLimOrders(
      user: PromiseOrValue<string>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    curPoint(overrides?: CallOverrides): Promise<number>;

    limitOrder(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    limitOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TokenExchange.LimitOrderViewStructOutput[]>;

    marketOrder(
      originToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      startPoint: PromiseOrValue<BigNumberish>,
      slipLimit: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairInfo(
      overrides?: CallOverrides
    ): Promise<[string, string] & { tokenX: string; tokenY: string }>;

    pointMargin(overrides?: CallOverrides): Promise<number>;

    pointOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [TokenExchange.OrderStructOutput, TokenExchange.OrderStructOutput] & {
        X: TokenExchange.OrderStructOutput;
        Y: TokenExchange.OrderStructOutput;
      }
    >;

    queryEarning(
      targetToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        sold: BigNumber;
        earned: BigNumber;
        selling: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    startOff(overrides?: CallOverrides): Promise<boolean>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CacheCleared(address)"(
      user?: PromiseOrValue<string> | null
    ): CacheClearedEventFilter;
    CacheCleared(user?: PromiseOrValue<string> | null): CacheClearedEventFilter;

    "EarningClaimed(address,int24,uint128,address,uint256)"(
      targetToken?: null,
      point?: null,
      earning?: null,
      wallet?: PromiseOrValue<string> | null,
      timestamp?: null
    ): EarningClaimedEventFilter;
    EarningClaimed(
      targetToken?: null,
      point?: null,
      earning?: null,
      wallet?: PromiseOrValue<string> | null,
      timestamp?: null
    ): EarningClaimedEventFilter;

    "LimitOrderCanceled(address,int24,uint128,address)"(
      originToken?: PromiseOrValue<string> | null,
      point?: PromiseOrValue<BigNumberish> | null,
      refund?: null,
      wallet?: PromiseOrValue<string> | null
    ): LimitOrderCanceledEventFilter;
    LimitOrderCanceled(
      originToken?: PromiseOrValue<string> | null,
      point?: PromiseOrValue<BigNumberish> | null,
      refund?: null,
      wallet?: PromiseOrValue<string> | null
    ): LimitOrderCanceledEventFilter;

    "LimitOrderPlaced(address,int24,uint128,uint128,address)"(
      token?: PromiseOrValue<string> | null,
      point?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      earning?: null,
      wallet?: PromiseOrValue<string> | null
    ): LimitOrderPlacedEventFilter;
    LimitOrderPlaced(
      token?: PromiseOrValue<string> | null,
      point?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      earning?: null,
      wallet?: PromiseOrValue<string> | null
    ): LimitOrderPlacedEventFilter;

    "MarketOrderCompleted(address,uint128,uint128)"(
      originToken?: PromiseOrValue<string> | null,
      amount?: null,
      earning?: null
    ): MarketOrderCompletedEventFilter;
    MarketOrderCompleted(
      originToken?: PromiseOrValue<string> | null,
      amount?: null,
      earning?: null
    ): MarketOrderCompletedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Swapped(address,int24,uint128,uint256)"(
      originToken?: null,
      point?: null,
      amount?: null,
      timestamp?: null
    ): SwappedEventFilter;
    Swapped(
      originToken?: null,
      point?: null,
      amount?: null,
      timestamp?: null
    ): SwappedEventFilter;
  };

  estimateGas: {
    _claimEarningInternal(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    blockDeployed(overrides?: CallOverrides): Promise<BigNumber>;

    cancelAllLimitOrders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelLimitOrder(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimAllEarnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimEarning(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    clearZeroLimOrders(
      user: PromiseOrValue<string>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    curPoint(overrides?: CallOverrides): Promise<BigNumber>;

    limitOrder(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    limitOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketOrder(
      originToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      startPoint: PromiseOrValue<BigNumberish>,
      slipLimit: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairInfo(overrides?: CallOverrides): Promise<BigNumber>;

    pointMargin(overrides?: CallOverrides): Promise<BigNumber>;

    pointOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queryEarning(
      targetToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startOff(overrides?: CallOverrides): Promise<BigNumber>;

    totalVolume(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _claimEarningInternal(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    blockDeployed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelAllLimitOrders(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelLimitOrder(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimAllEarnings(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimEarning(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    clearZeroLimOrders(
      user: PromiseOrValue<string>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    curPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitOrder(
      originToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    limitOrders(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketOrder(
      originToken: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      startPoint: PromiseOrValue<BigNumberish>,
      slipLimit: PromiseOrValue<BigNumberish>,
      holder: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointMargin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pointOrder(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queryEarning(
      targetToken: PromiseOrValue<string>,
      point: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startOff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVolume(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
