/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IMarketplace {
  export type OrderStruct = {
    owner: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    quantity: PromiseOrValue<BigNumberish>;
    id: PromiseOrValue<BytesLike>;
    nft: PromiseOrValue<string>;
    tokenID: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    owner: string;
    price: BigNumber;
    quantity: BigNumber;
    id: string;
    nft: string;
    tokenID: BigNumber;
  };

  export type CollectionInfoStruct = {
    owner: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    description: PromiseOrValue<string>;
    website: PromiseOrValue<string>;
    image: PromiseOrValue<string>;
    rule: PromiseOrValue<string>;
    kind: PromiseOrValue<BigNumberish>;
    listingType: PromiseOrValue<BigNumberish>;
  };

  export type CollectionInfoStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    number,
    number
  ] & {
    owner: string;
    name: string;
    description: string;
    website: string;
    image: string;
    rule: string;
    kind: number;
    listingType: number;
  };

  export type TokenInfoStruct = {
    balance: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    uri: PromiseOrValue<string>;
  };

  export type TokenInfoStructOutput = [BigNumber, BigNumber, string] & {
    balance: BigNumber;
    totalSupply: BigNumber;
    uri: string;
  };
}

export interface MarketplaceInterface extends utils.Interface {
  functions: {
    "REVERT_ASK_DOES_NOT_EXIST()": FunctionFragment;
    "REVERT_ASK_INSUFFICIENT_VALUE()": FunctionFragment;
    "REVERT_ASK_IS_RESERVED()": FunctionFragment;
    "REVERT_ASK_SELLER_NOT_OWNER()": FunctionFragment;
    "REVERT_BID_TOO_LOW()": FunctionFragment;
    "REVERT_CANT_ACCEPT_OWN_ASK()": FunctionFragment;
    "REVERT_EXISTED_TOKEN()": FunctionFragment;
    "REVERT_INSUFFICIENT_ETHER()": FunctionFragment;
    "REVERT_INVALID_MARKET_NAME()": FunctionFragment;
    "REVERT_INVALID_TOKEN_ADDRESS()": FunctionFragment;
    "REVERT_LISTING_TYPE_ERROR()": FunctionFragment;
    "REVERT_MARKET_NAME_OCCUPIED()": FunctionFragment;
    "REVERT_MARKET_NAME_REQUIRED()": FunctionFragment;
    "REVERT_NFT_NOT_SENT()": FunctionFragment;
    "REVERT_NOT_A_CREATOR_OF_ASK()": FunctionFragment;
    "REVERT_NOT_A_CREATOR_OF_BID()": FunctionFragment;
    "REVERT_NOT_OWNER_OF_TOKEN_ID()": FunctionFragment;
    "REVERT_ORDER_NOT_FOUND()": FunctionFragment;
    "REVERT_OWNER_OF_TOKEN_ID()": FunctionFragment;
    "REVERT_PERMISSION_DENIED()": FunctionFragment;
    "REVERT_WRONG_LISTING_TYPE()": FunctionFragment;
    "acceptAsk(address[],uint256[],bytes32[],uint256[],uint256,address[])": FunctionFragment;
    "acceptBid(address[],uint256[],bytes32[],uint256[],uint256,address[])": FunctionFragment;
    "addFeatured(string,address)": FunctionFragment;
    "addTokenToMarket(string,address)": FunctionFragment;
    "asks(address,uint256)": FunctionFragment;
    "asksByWallet(address)": FunctionFragment;
    "bids(address,uint256)": FunctionFragment;
    "bidsByWallet(address)": FunctionFragment;
    "cancelAsk(address[],uint256[],bytes32[])": FunctionFragment;
    "cancelBid(address[],uint256[],bytes32[])": FunctionFragment;
    "collectionInfo(address)": FunctionFragment;
    "collections(string,uint8)": FunctionFragment;
    "collectionsPiece(string,uint8,uint256)": FunctionFragment;
    "collectionsSize(string,uint8)": FunctionFragment;
    "createAsk(address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "createBid(address[],uint256[],uint256[],uint256[])": FunctionFragment;
    "createMarket(string)": FunctionFragment;
    "deleteFeatured(string,uint256)": FunctionFragment;
    "deleteTokenFromMarket(string,uint256,uint8)": FunctionFragment;
    "escrow(address)": FunctionFragment;
    "listToken(address,string,string,string,string,uint8,uint8,address)": FunctionFragment;
    "listings(address)": FunctionFragment;
    "listingsPiece(address,address,uint256)": FunctionFragment;
    "listingsSize(address)": FunctionFragment;
    "marketsByOwner(address)": FunctionFragment;
    "modifyTokenInfo(address,string,string,string,string,uint8,address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "prices(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sales(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenInfo(address,uint256,address)": FunctionFragment;
    "totalMarkets()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTokenOwner(address,address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "REVERT_ASK_DOES_NOT_EXIST"
      | "REVERT_ASK_INSUFFICIENT_VALUE"
      | "REVERT_ASK_IS_RESERVED"
      | "REVERT_ASK_SELLER_NOT_OWNER"
      | "REVERT_BID_TOO_LOW"
      | "REVERT_CANT_ACCEPT_OWN_ASK"
      | "REVERT_EXISTED_TOKEN"
      | "REVERT_INSUFFICIENT_ETHER"
      | "REVERT_INVALID_MARKET_NAME"
      | "REVERT_INVALID_TOKEN_ADDRESS"
      | "REVERT_LISTING_TYPE_ERROR"
      | "REVERT_MARKET_NAME_OCCUPIED"
      | "REVERT_MARKET_NAME_REQUIRED"
      | "REVERT_NFT_NOT_SENT"
      | "REVERT_NOT_A_CREATOR_OF_ASK"
      | "REVERT_NOT_A_CREATOR_OF_BID"
      | "REVERT_NOT_OWNER_OF_TOKEN_ID"
      | "REVERT_ORDER_NOT_FOUND"
      | "REVERT_OWNER_OF_TOKEN_ID"
      | "REVERT_PERMISSION_DENIED"
      | "REVERT_WRONG_LISTING_TYPE"
      | "acceptAsk"
      | "acceptBid"
      | "addFeatured"
      | "addTokenToMarket"
      | "asks"
      | "asksByWallet"
      | "bids"
      | "bidsByWallet"
      | "cancelAsk"
      | "cancelBid"
      | "collectionInfo"
      | "collections"
      | "collectionsPiece"
      | "collectionsSize"
      | "createAsk"
      | "createBid"
      | "createMarket"
      | "deleteFeatured"
      | "deleteTokenFromMarket"
      | "escrow"
      | "listToken"
      | "listings"
      | "listingsPiece"
      | "listingsSize"
      | "marketsByOwner"
      | "modifyTokenInfo"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "prices"
      | "renounceOwnership"
      | "sales"
      | "supportsInterface"
      | "tokenInfo"
      | "totalMarkets"
      | "transferOwnership"
      | "transferTokenOwner"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REVERT_ASK_DOES_NOT_EXIST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_ASK_INSUFFICIENT_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_ASK_IS_RESERVED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_ASK_SELLER_NOT_OWNER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_BID_TOO_LOW",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_CANT_ACCEPT_OWN_ASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_EXISTED_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_INSUFFICIENT_ETHER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_INVALID_MARKET_NAME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_INVALID_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_LISTING_TYPE_ERROR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_MARKET_NAME_OCCUPIED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_MARKET_NAME_REQUIRED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_NFT_NOT_SENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_NOT_A_CREATOR_OF_ASK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_NOT_A_CREATOR_OF_BID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_NOT_OWNER_OF_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_ORDER_NOT_FOUND",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_OWNER_OF_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_PERMISSION_DENIED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVERT_WRONG_LISTING_TYPE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptAsk",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptBid",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addFeatured",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenToMarket",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "asks",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "asksByWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bids",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bidsByWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelAsk",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBid",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collections",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionsPiece",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionsSize",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createAsk",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createBid",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFeatured",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteTokenFromMarket",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "escrow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "listingsPiece",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listingsSize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "marketsByOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyTokenInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prices",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sales",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMarkets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTokenOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "REVERT_ASK_DOES_NOT_EXIST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_ASK_INSUFFICIENT_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_ASK_IS_RESERVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_ASK_SELLER_NOT_OWNER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_BID_TOO_LOW",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_CANT_ACCEPT_OWN_ASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_EXISTED_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_INSUFFICIENT_ETHER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_INVALID_MARKET_NAME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_INVALID_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_LISTING_TYPE_ERROR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_MARKET_NAME_OCCUPIED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_MARKET_NAME_REQUIRED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_NFT_NOT_SENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_NOT_A_CREATOR_OF_ASK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_NOT_A_CREATOR_OF_BID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_NOT_OWNER_OF_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_ORDER_NOT_FOUND",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_OWNER_OF_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_PERMISSION_DENIED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVERT_WRONG_LISTING_TYPE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acceptAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addFeatured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenToMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "asksByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidsByWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionsPiece",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionsSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createAsk", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteFeatured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteTokenFromMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listings", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listingsPiece",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "listingsSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AcceptAsk(address,uint256,uint256,uint256,bytes32)": EventFragment;
    "AcceptBid(address,uint256,uint256,uint256,bytes32)": EventFragment;
    "CancelAsk(address,uint256,bytes32)": EventFragment;
    "CancelBid(address,uint256,bytes32)": EventFragment;
    "CreateAsk(address,uint256,uint256,uint256,bytes32)": EventFragment;
    "CreateBid(address,uint256,uint256,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AcceptAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AcceptBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateAsk"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AcceptAskEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
  quantity: BigNumber;
  id: string;
}
export type AcceptAskEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  AcceptAskEventObject
>;

export type AcceptAskEventFilter = TypedEventFilter<AcceptAskEvent>;

export interface AcceptBidEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
  quantity: BigNumber;
  id: string;
}
export type AcceptBidEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  AcceptBidEventObject
>;

export type AcceptBidEventFilter = TypedEventFilter<AcceptBidEvent>;

export interface CancelAskEventObject {
  nft: string;
  tokenID: BigNumber;
  id: string;
}
export type CancelAskEvent = TypedEvent<
  [string, BigNumber, string],
  CancelAskEventObject
>;

export type CancelAskEventFilter = TypedEventFilter<CancelAskEvent>;

export interface CancelBidEventObject {
  nft: string;
  tokenID: BigNumber;
  id: string;
}
export type CancelBidEvent = TypedEvent<
  [string, BigNumber, string],
  CancelBidEventObject
>;

export type CancelBidEventFilter = TypedEventFilter<CancelBidEvent>;

export interface CreateAskEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
  quantity: BigNumber;
  id: string;
}
export type CreateAskEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  CreateAskEventObject
>;

export type CreateAskEventFilter = TypedEventFilter<CreateAskEvent>;

export interface CreateBidEventObject {
  nft: string;
  tokenID: BigNumber;
  price: BigNumber;
  quantity: BigNumber;
  id: string;
}
export type CreateBidEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  CreateBidEventObject
>;

export type CreateBidEventFilter = TypedEventFilter<CreateBidEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Marketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    REVERT_ASK_DOES_NOT_EXIST(overrides?: CallOverrides): Promise<[string]>;

    REVERT_ASK_INSUFFICIENT_VALUE(overrides?: CallOverrides): Promise<[string]>;

    REVERT_ASK_IS_RESERVED(overrides?: CallOverrides): Promise<[string]>;

    REVERT_ASK_SELLER_NOT_OWNER(overrides?: CallOverrides): Promise<[string]>;

    REVERT_BID_TOO_LOW(overrides?: CallOverrides): Promise<[string]>;

    REVERT_CANT_ACCEPT_OWN_ASK(overrides?: CallOverrides): Promise<[string]>;

    REVERT_EXISTED_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    REVERT_INSUFFICIENT_ETHER(overrides?: CallOverrides): Promise<[string]>;

    REVERT_INVALID_MARKET_NAME(overrides?: CallOverrides): Promise<[string]>;

    REVERT_INVALID_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    REVERT_LISTING_TYPE_ERROR(overrides?: CallOverrides): Promise<[string]>;

    REVERT_MARKET_NAME_OCCUPIED(overrides?: CallOverrides): Promise<[string]>;

    REVERT_MARKET_NAME_REQUIRED(overrides?: CallOverrides): Promise<[string]>;

    REVERT_NFT_NOT_SENT(overrides?: CallOverrides): Promise<[string]>;

    REVERT_NOT_A_CREATOR_OF_ASK(overrides?: CallOverrides): Promise<[string]>;

    REVERT_NOT_A_CREATOR_OF_BID(overrides?: CallOverrides): Promise<[string]>;

    REVERT_NOT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<[string]>;

    REVERT_ORDER_NOT_FOUND(overrides?: CallOverrides): Promise<[string]>;

    REVERT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<[string]>;

    REVERT_PERMISSION_DENIED(overrides?: CallOverrides): Promise<[string]>;

    REVERT_WRONG_LISTING_TYPE(overrides?: CallOverrides): Promise<[string]>;

    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      quantity: PromiseOrValue<BigNumberish>[],
      feeStrategy: PromiseOrValue<BigNumberish>,
      feeTakers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      quantity: PromiseOrValue<BigNumberish>[],
      feeStrategy: PromiseOrValue<BigNumberish>,
      feeTakers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addFeatured(
      marketName: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addTokenToMarket(
      marketName: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asks(
      nft: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.OrderStructOutput[]] & {
        orders: IMarketplace.OrderStructOutput[];
      }
    >;

    asksByWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.OrderStructOutput[]] & {
        orders: IMarketplace.OrderStructOutput[];
      }
    >;

    bids(
      nft: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.OrderStructOutput[]] & {
        orders: IMarketplace.OrderStructOutput[];
      }
    >;

    bidsByWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.OrderStructOutput[]] & {
        orders: IMarketplace.OrderStructOutput[];
      }
    >;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collectionInfo(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.CollectionInfoStructOutput] & {
        collectionInfoRet: IMarketplace.CollectionInfoStructOutput;
      }
    >;

    collections(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { listedCollections: string[] }>;

    collectionsPiece(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMarketplace.CollectionInfoStructOutput] & {
        collectionInfoRet: IMarketplace.CollectionInfoStructOutput;
      }
    >;

    collectionsSize(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { listedCollectionsSize: BigNumber }>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      quantity: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      quantity: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMarket(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteFeatured(
      marketName: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteTokenFromMarket(
      marketName: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    listToken(
      nftAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      image: PromiseOrValue<string>,
      nftType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      rule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listings(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { tokens: BigNumber[] }>;

    listingsPiece(
      collection: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        IMarketplace.CollectionInfoStructOutput,
        IMarketplace.TokenInfoStructOutput,
        BigNumber,
        IMarketplace.OrderStructOutput[],
        IMarketplace.OrderStructOutput[]
      ] & {
        tokenId: BigNumber;
        collectionInfoRes: IMarketplace.CollectionInfoStructOutput;
        baseInfo: IMarketplace.TokenInfoStructOutput;
        price: BigNumber;
        asksRes: IMarketplace.OrderStructOutput[];
        bidsRes: IMarketplace.OrderStructOutput[];
      }
    >;

    listingsSize(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    marketsByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { markets: string[] }>;

    modifyTokenInfo(
      tokenAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      image: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      rule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prices(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        IMarketplace.CollectionInfoStructOutput,
        BigNumber,
        IMarketplace.OrderStructOutput[],
        IMarketplace.OrderStructOutput[],
        IMarketplace.TokenInfoStructOutput
      ] & {
        collectionInfoRes: IMarketplace.CollectionInfoStructOutput;
        price: BigNumber;
        asksRes: IMarketplace.OrderStructOutput[];
        bidsRes: IMarketplace.OrderStructOutput[];
        baseInfo: IMarketplace.TokenInfoStructOutput;
      }
    >;

    totalMarkets(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTokenOwner(
      tokenAddress: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  REVERT_ASK_DOES_NOT_EXIST(overrides?: CallOverrides): Promise<string>;

  REVERT_ASK_INSUFFICIENT_VALUE(overrides?: CallOverrides): Promise<string>;

  REVERT_ASK_IS_RESERVED(overrides?: CallOverrides): Promise<string>;

  REVERT_ASK_SELLER_NOT_OWNER(overrides?: CallOverrides): Promise<string>;

  REVERT_BID_TOO_LOW(overrides?: CallOverrides): Promise<string>;

  REVERT_CANT_ACCEPT_OWN_ASK(overrides?: CallOverrides): Promise<string>;

  REVERT_EXISTED_TOKEN(overrides?: CallOverrides): Promise<string>;

  REVERT_INSUFFICIENT_ETHER(overrides?: CallOverrides): Promise<string>;

  REVERT_INVALID_MARKET_NAME(overrides?: CallOverrides): Promise<string>;

  REVERT_INVALID_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  REVERT_LISTING_TYPE_ERROR(overrides?: CallOverrides): Promise<string>;

  REVERT_MARKET_NAME_OCCUPIED(overrides?: CallOverrides): Promise<string>;

  REVERT_MARKET_NAME_REQUIRED(overrides?: CallOverrides): Promise<string>;

  REVERT_NFT_NOT_SENT(overrides?: CallOverrides): Promise<string>;

  REVERT_NOT_A_CREATOR_OF_ASK(overrides?: CallOverrides): Promise<string>;

  REVERT_NOT_A_CREATOR_OF_BID(overrides?: CallOverrides): Promise<string>;

  REVERT_NOT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<string>;

  REVERT_ORDER_NOT_FOUND(overrides?: CallOverrides): Promise<string>;

  REVERT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<string>;

  REVERT_PERMISSION_DENIED(overrides?: CallOverrides): Promise<string>;

  REVERT_WRONG_LISTING_TYPE(overrides?: CallOverrides): Promise<string>;

  acceptAsk(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    id: PromiseOrValue<BytesLike>[],
    quantity: PromiseOrValue<BigNumberish>[],
    feeStrategy: PromiseOrValue<BigNumberish>,
    feeTakers: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptBid(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    id: PromiseOrValue<BytesLike>[],
    quantity: PromiseOrValue<BigNumberish>[],
    feeStrategy: PromiseOrValue<BigNumberish>,
    feeTakers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addFeatured(
    marketName: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addTokenToMarket(
    marketName: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asks(
    nft: PromiseOrValue<string>,
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.OrderStructOutput[]>;

  asksByWallet(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.OrderStructOutput[]>;

  bids(
    nft: PromiseOrValue<string>,
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.OrderStructOutput[]>;

  bidsByWallet(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.OrderStructOutput[]>;

  cancelAsk(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    id: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelBid(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    id: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collectionInfo(
    collection: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.CollectionInfoStructOutput>;

  collections(
    marketName: PromiseOrValue<string>,
    kind: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  collectionsPiece(
    marketName: PromiseOrValue<string>,
    kind: PromiseOrValue<BigNumberish>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarketplace.CollectionInfoStructOutput>;

  collectionsSize(
    marketName: PromiseOrValue<string>,
    kind: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createAsk(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    price: PromiseOrValue<BigNumberish>[],
    quantity: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBid(
    nft: PromiseOrValue<string>[],
    tokenID: PromiseOrValue<BigNumberish>[],
    price: PromiseOrValue<BigNumberish>[],
    quantity: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMarket(
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteFeatured(
    marketName: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteTokenFromMarket(
    marketName: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    kind: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  escrow(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  listToken(
    nftAddress: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    website: PromiseOrValue<string>,
    image: PromiseOrValue<string>,
    nftType: PromiseOrValue<BigNumberish>,
    listingType: PromiseOrValue<BigNumberish>,
    rule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listings(
    nft: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  listingsPiece(
    collection: PromiseOrValue<string>,
    wallet: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      IMarketplace.CollectionInfoStructOutput,
      IMarketplace.TokenInfoStructOutput,
      BigNumber,
      IMarketplace.OrderStructOutput[],
      IMarketplace.OrderStructOutput[]
    ] & {
      tokenId: BigNumber;
      collectionInfoRes: IMarketplace.CollectionInfoStructOutput;
      baseInfo: IMarketplace.TokenInfoStructOutput;
      price: BigNumber;
      asksRes: IMarketplace.OrderStructOutput[];
      bidsRes: IMarketplace.OrderStructOutput[];
    }
  >;

  listingsSize(
    nft: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  marketsByOwner(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  modifyTokenInfo(
    tokenAddress: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    website: PromiseOrValue<string>,
    image: PromiseOrValue<string>,
    kind: PromiseOrValue<BigNumberish>,
    rule: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    ids: PromiseOrValue<BigNumberish>[],
    values: PromiseOrValue<BigNumberish>[],
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: PromiseOrValue<string>,
    from: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  prices(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sales(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenInfo(
    collection: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      IMarketplace.CollectionInfoStructOutput,
      BigNumber,
      IMarketplace.OrderStructOutput[],
      IMarketplace.OrderStructOutput[],
      IMarketplace.TokenInfoStructOutput
    ] & {
      collectionInfoRes: IMarketplace.CollectionInfoStructOutput;
      price: BigNumber;
      asksRes: IMarketplace.OrderStructOutput[];
      bidsRes: IMarketplace.OrderStructOutput[];
      baseInfo: IMarketplace.TokenInfoStructOutput;
    }
  >;

  totalMarkets(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTokenOwner(
    tokenAddress: PromiseOrValue<string>,
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    REVERT_ASK_DOES_NOT_EXIST(overrides?: CallOverrides): Promise<string>;

    REVERT_ASK_INSUFFICIENT_VALUE(overrides?: CallOverrides): Promise<string>;

    REVERT_ASK_IS_RESERVED(overrides?: CallOverrides): Promise<string>;

    REVERT_ASK_SELLER_NOT_OWNER(overrides?: CallOverrides): Promise<string>;

    REVERT_BID_TOO_LOW(overrides?: CallOverrides): Promise<string>;

    REVERT_CANT_ACCEPT_OWN_ASK(overrides?: CallOverrides): Promise<string>;

    REVERT_EXISTED_TOKEN(overrides?: CallOverrides): Promise<string>;

    REVERT_INSUFFICIENT_ETHER(overrides?: CallOverrides): Promise<string>;

    REVERT_INVALID_MARKET_NAME(overrides?: CallOverrides): Promise<string>;

    REVERT_INVALID_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    REVERT_LISTING_TYPE_ERROR(overrides?: CallOverrides): Promise<string>;

    REVERT_MARKET_NAME_OCCUPIED(overrides?: CallOverrides): Promise<string>;

    REVERT_MARKET_NAME_REQUIRED(overrides?: CallOverrides): Promise<string>;

    REVERT_NFT_NOT_SENT(overrides?: CallOverrides): Promise<string>;

    REVERT_NOT_A_CREATOR_OF_ASK(overrides?: CallOverrides): Promise<string>;

    REVERT_NOT_A_CREATOR_OF_BID(overrides?: CallOverrides): Promise<string>;

    REVERT_NOT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<string>;

    REVERT_ORDER_NOT_FOUND(overrides?: CallOverrides): Promise<string>;

    REVERT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<string>;

    REVERT_PERMISSION_DENIED(overrides?: CallOverrides): Promise<string>;

    REVERT_WRONG_LISTING_TYPE(overrides?: CallOverrides): Promise<string>;

    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      quantity: PromiseOrValue<BigNumberish>[],
      feeStrategy: PromiseOrValue<BigNumberish>,
      feeTakers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      quantity: PromiseOrValue<BigNumberish>[],
      feeStrategy: PromiseOrValue<BigNumberish>,
      feeTakers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addFeatured(
      marketName: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addTokenToMarket(
      marketName: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    asks(
      nft: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.OrderStructOutput[]>;

    asksByWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.OrderStructOutput[]>;

    bids(
      nft: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.OrderStructOutput[]>;

    bidsByWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.OrderStructOutput[]>;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    collectionInfo(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.CollectionInfoStructOutput>;

    collections(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    collectionsPiece(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarketplace.CollectionInfoStructOutput>;

    collectionsSize(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      quantity: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      quantity: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createMarket(
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteFeatured(
      marketName: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteTokenFromMarket(
      marketName: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listToken(
      nftAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      image: PromiseOrValue<string>,
      nftType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      rule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    listings(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    listingsPiece(
      collection: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        IMarketplace.CollectionInfoStructOutput,
        IMarketplace.TokenInfoStructOutput,
        BigNumber,
        IMarketplace.OrderStructOutput[],
        IMarketplace.OrderStructOutput[]
      ] & {
        tokenId: BigNumber;
        collectionInfoRes: IMarketplace.CollectionInfoStructOutput;
        baseInfo: IMarketplace.TokenInfoStructOutput;
        price: BigNumber;
        asksRes: IMarketplace.OrderStructOutput[];
        bidsRes: IMarketplace.OrderStructOutput[];
      }
    >;

    listingsSize(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketsByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    modifyTokenInfo(
      tokenAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      image: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      rule: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    prices(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        IMarketplace.CollectionInfoStructOutput,
        BigNumber,
        IMarketplace.OrderStructOutput[],
        IMarketplace.OrderStructOutput[],
        IMarketplace.TokenInfoStructOutput
      ] & {
        collectionInfoRes: IMarketplace.CollectionInfoStructOutput;
        price: BigNumber;
        asksRes: IMarketplace.OrderStructOutput[];
        bidsRes: IMarketplace.OrderStructOutput[];
        baseInfo: IMarketplace.TokenInfoStructOutput;
      }
    >;

    totalMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTokenOwner(
      tokenAddress: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AcceptAsk(address,uint256,uint256,uint256,bytes32)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      quantity?: null,
      id?: null
    ): AcceptAskEventFilter;
    AcceptAsk(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      quantity?: null,
      id?: null
    ): AcceptAskEventFilter;

    "AcceptBid(address,uint256,uint256,uint256,bytes32)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      quantity?: null,
      id?: null
    ): AcceptBidEventFilter;
    AcceptBid(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      quantity?: null,
      id?: null
    ): AcceptBidEventFilter;

    "CancelAsk(address,uint256,bytes32)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      id?: null
    ): CancelAskEventFilter;
    CancelAsk(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      id?: null
    ): CancelAskEventFilter;

    "CancelBid(address,uint256,bytes32)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      id?: null
    ): CancelBidEventFilter;
    CancelBid(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      id?: null
    ): CancelBidEventFilter;

    "CreateAsk(address,uint256,uint256,uint256,bytes32)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      quantity?: null,
      id?: null
    ): CreateAskEventFilter;
    CreateAsk(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      quantity?: null,
      id?: null
    ): CreateAskEventFilter;

    "CreateBid(address,uint256,uint256,uint256,bytes32)"(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      quantity?: null,
      id?: null
    ): CreateBidEventFilter;
    CreateBid(
      nft?: PromiseOrValue<string> | null,
      tokenID?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      quantity?: null,
      id?: null
    ): CreateBidEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    REVERT_ASK_DOES_NOT_EXIST(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_ASK_INSUFFICIENT_VALUE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REVERT_ASK_IS_RESERVED(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_ASK_SELLER_NOT_OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_BID_TOO_LOW(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_CANT_ACCEPT_OWN_ASK(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_EXISTED_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_INSUFFICIENT_ETHER(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_INVALID_MARKET_NAME(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_INVALID_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_LISTING_TYPE_ERROR(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_MARKET_NAME_OCCUPIED(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_MARKET_NAME_REQUIRED(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_NFT_NOT_SENT(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_NOT_A_CREATOR_OF_ASK(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_NOT_A_CREATOR_OF_BID(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_NOT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_ORDER_NOT_FOUND(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_OWNER_OF_TOKEN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_PERMISSION_DENIED(overrides?: CallOverrides): Promise<BigNumber>;

    REVERT_WRONG_LISTING_TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      quantity: PromiseOrValue<BigNumberish>[],
      feeStrategy: PromiseOrValue<BigNumberish>,
      feeTakers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      quantity: PromiseOrValue<BigNumberish>[],
      feeStrategy: PromiseOrValue<BigNumberish>,
      feeTakers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addFeatured(
      marketName: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addTokenToMarket(
      marketName: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asks(
      nft: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    asksByWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bids(
      nft: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bidsByWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collectionInfo(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collections(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionsPiece(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionsSize(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      quantity: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      quantity: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMarket(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteFeatured(
      marketName: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteTokenFromMarket(
      marketName: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listToken(
      nftAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      image: PromiseOrValue<string>,
      nftType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      rule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listings(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingsPiece(
      collection: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listingsSize(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketsByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyTokenInfo(
      tokenAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      image: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      rule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prices(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTokenOwner(
      tokenAddress: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    REVERT_ASK_DOES_NOT_EXIST(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_ASK_INSUFFICIENT_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_ASK_IS_RESERVED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_ASK_SELLER_NOT_OWNER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_BID_TOO_LOW(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_CANT_ACCEPT_OWN_ASK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_EXISTED_TOKEN(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_INSUFFICIENT_ETHER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_INVALID_MARKET_NAME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_INVALID_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_LISTING_TYPE_ERROR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_MARKET_NAME_OCCUPIED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_MARKET_NAME_REQUIRED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_NFT_NOT_SENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_NOT_A_CREATOR_OF_ASK(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_NOT_A_CREATOR_OF_BID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_NOT_OWNER_OF_TOKEN_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_ORDER_NOT_FOUND(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_OWNER_OF_TOKEN_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_PERMISSION_DENIED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REVERT_WRONG_LISTING_TYPE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      quantity: PromiseOrValue<BigNumberish>[],
      feeStrategy: PromiseOrValue<BigNumberish>,
      feeTakers: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      quantity: PromiseOrValue<BigNumberish>[],
      feeStrategy: PromiseOrValue<BigNumberish>,
      feeTakers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addFeatured(
      marketName: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addTokenToMarket(
      marketName: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asks(
      nft: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    asksByWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bids(
      nft: PromiseOrValue<string>,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidsByWallet(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      id: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collectionInfo(
      collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collections(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionsPiece(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionsSize(
      marketName: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createAsk(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      quantity: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBid(
      nft: PromiseOrValue<string>[],
      tokenID: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>[],
      quantity: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMarket(
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteFeatured(
      marketName: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteTokenFromMarket(
      marketName: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    escrow(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listToken(
      nftAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      image: PromiseOrValue<string>,
      nftType: PromiseOrValue<BigNumberish>,
      listingType: PromiseOrValue<BigNumberish>,
      rule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listings(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listingsPiece(
      collection: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listingsSize(
      nft: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketsByOwner(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyTokenInfo(
      tokenAddress: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      website: PromiseOrValue<string>,
      image: PromiseOrValue<string>,
      kind: PromiseOrValue<BigNumberish>,
      rule: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      ids: PromiseOrValue<BigNumberish>[],
      values: PromiseOrValue<BigNumberish>[],
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: PromiseOrValue<string>,
      from: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prices(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sales(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenInfo(
      collection: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTokenOwner(
      tokenAddress: PromiseOrValue<string>,
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
