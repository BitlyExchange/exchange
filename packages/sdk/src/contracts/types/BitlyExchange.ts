/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace BitlyExchange {
  export type PairInfoStruct = {
    pair: PromiseOrValue<string>;
    tokenX: PromiseOrValue<string>;
    tokenY: PromiseOrValue<string>;
  };

  export type PairInfoStructOutput = [string, string, string] & {
    pair: string;
    tokenX: string;
    tokenY: string;
  };
}

export interface BitlyExchangeInterface extends utils.Interface {
  functions: {
    "bank()": FunctionFragment;
    "listPair(address,address,int24)": FunctionFragment;
    "listToken(address,string,string,bytes)": FunctionFragment;
    "modifyTokenInfo(address,string,string,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "takeTokenOwner(address)": FunctionFragment;
    "tokenInfo(address)": FunctionFragment;
    "tokens()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifiedToken()": FunctionFragment;
    "verify(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bank"
      | "listPair"
      | "listToken"
      | "modifyTokenInfo"
      | "owner"
      | "renounceOwnership"
      | "takeTokenOwner"
      | "tokenInfo"
      | "tokens"
      | "transferOwnership"
      | "verifiedToken"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "bank", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "listPair",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "listToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyTokenInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takeTokenOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "bank", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeTokenOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "PairListed(address,address)": EventFragment;
    "TokenListed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenListed"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PairListedEventObject {
  tokenX: string;
  tokenY: string;
}
export type PairListedEvent = TypedEvent<
  [string, string],
  PairListedEventObject
>;

export type PairListedEventFilter = TypedEventFilter<PairListedEvent>;

export interface TokenListedEventObject {
  tokenAddress: string;
}
export type TokenListedEvent = TypedEvent<[string], TokenListedEventObject>;

export type TokenListedEventFilter = TypedEventFilter<TokenListedEvent>;

export interface BitlyExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BitlyExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bank(overrides?: CallOverrides): Promise<[string]>;

    listPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      pointMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    listToken(
      tokenAddress: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      logo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    modifyTokenInfo(
      tokenAddress: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      logo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeTokenOwner(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenInfo(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        number,
        BitlyExchange.PairInfoStructOutput[]
      ] & {
        description: string;
        url: string;
        logo: string;
        name: string;
        symbol: string;
        decimals: number;
        pairs: BitlyExchange.PairInfoStructOutput[];
      }
    >;

    tokens(
      overrides?: CallOverrides
    ): Promise<[string[]] & { listedTokens: string[] }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifiedToken(
      overrides?: CallOverrides
    ): Promise<[string[]] & { vTokens: string[] }>;

    verify(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bank(overrides?: CallOverrides): Promise<string>;

  listPair(
    tokenX: PromiseOrValue<string>,
    tokenY: PromiseOrValue<string>,
    pointMargin: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  listToken(
    tokenAddress: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    url: PromiseOrValue<string>,
    logo: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  modifyTokenInfo(
    tokenAddress: PromiseOrValue<string>,
    description: PromiseOrValue<string>,
    url: PromiseOrValue<string>,
    logo: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeTokenOwner(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenInfo(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      number,
      BitlyExchange.PairInfoStructOutput[]
    ] & {
      description: string;
      url: string;
      logo: string;
      name: string;
      symbol: string;
      decimals: number;
      pairs: BitlyExchange.PairInfoStructOutput[];
    }
  >;

  tokens(overrides?: CallOverrides): Promise<string[]>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifiedToken(overrides?: CallOverrides): Promise<string[]>;

  verify(
    tokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bank(overrides?: CallOverrides): Promise<string>;

    listPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      pointMargin: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    listToken(
      tokenAddress: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      logo: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    modifyTokenInfo(
      tokenAddress: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      logo: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    takeTokenOwner(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenInfo(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        number,
        BitlyExchange.PairInfoStructOutput[]
      ] & {
        description: string;
        url: string;
        logo: string;
        name: string;
        symbol: string;
        decimals: number;
        pairs: BitlyExchange.PairInfoStructOutput[];
      }
    >;

    tokens(overrides?: CallOverrides): Promise<string[]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifiedToken(overrides?: CallOverrides): Promise<string[]>;

    verify(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PairListed(address,address)"(
      tokenX?: null,
      tokenY?: null
    ): PairListedEventFilter;
    PairListed(tokenX?: null, tokenY?: null): PairListedEventFilter;

    "TokenListed(address)"(tokenAddress?: null): TokenListedEventFilter;
    TokenListed(tokenAddress?: null): TokenListedEventFilter;
  };

  estimateGas: {
    bank(overrides?: CallOverrides): Promise<BigNumber>;

    listPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      pointMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    listToken(
      tokenAddress: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      logo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    modifyTokenInfo(
      tokenAddress: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      logo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeTokenOwner(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenInfo(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifiedToken(overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bank(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listPair(
      tokenX: PromiseOrValue<string>,
      tokenY: PromiseOrValue<string>,
      pointMargin: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    listToken(
      tokenAddress: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      logo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    modifyTokenInfo(
      tokenAddress: PromiseOrValue<string>,
      description: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      logo: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeTokenOwner(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenInfo(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifiedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verify(
      tokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
